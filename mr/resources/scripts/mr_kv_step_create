#!/usr/bin/env python2.7

import sys
import os.path
dev_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
sys.path.insert(0, dev_path)

import argparse
import pprint
import select

import mr.config.log
import mr.models.kv.workflow
import mr.models.kv.step
import mr.models.kv.handler

description = "Create a step entity"

parser = argparse.ArgumentParser(description=description)

parser.add_argument('workflow_name', help='Workflow name')
parser.add_argument('name', help='Name')
parser.add_argument('description', help='Description')
parser.add_argument('map_handler_name', help='Handler that receives arguments and does maps')
parser.add_argument('reduce_handler_name', help='Handler that receives and reduces one or more results to a single result')

args = parser.parse_args()

workflow = mr.models.kv.workflow.get(args.workflow_name)

# TODO(dustin): We might want to check these against the actual library (but 
#               maybe not). Give it some thought.
try:
    handler_map = mr.models.kv.handler.get(workflow, args.map_handler_name)
except KeyError:
    print("Map handler is invalid: [%s]" % (args.map_handler_name,))
    sys.exit(1)

try:
    handler_reduce = mr.models.kv.handler.get(workflow, args.reduce_handler_name)
except KeyError:
    print("Reduce handler is invalid: [%s]" % (args.reduce_handler_name,))
    sys.exit(2)

s = mr.models.kv.step.Step(
        workflow=workflow, 
        step_name=args.name, 
        description=args.description, 
        map_handler_name=handler_map.handler_name,
        reduce_handler_name=handler_reduce.handler_name)

s.save()

pprint.pprint(s)
