#!/usr/bin/env python2.7

import sys
import os.path
dev_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
sys.path.insert(0, dev_path)

import argparse
import graphviz

import mr.config.log
import mr.trace
import mr.constants
import mr.models.kv.job
import mr.models.kv.invocation
import mr.models.kv.step

_OUTPUT_FILEPATH_TEMPLATE = 'request-%(request_id)s.dot'
_GRAPH_COMMENT_TEMPLATE = 'Request %(request_id)s'

description = "Graph the invocation-graph for a request"

parser = argparse.ArgumentParser(description=description)

parser.add_argument('workflow_name', help='Workflow name')
parser.add_argument('request_id', help='Request ID')

args = parser.parse_args()

workflow = mr.models.kv.workflow.get(args.workflow_name)
request = mr.models.kv.request.get(workflow, args.request_id)
root_invocation = mr.models.kv.invocation.get(workflow, request.invocation_id)

job = mr.models.kv.job.get(workflow, request.job_name)

def _escape(text):
    return text.replace("\\", "\\\\").replace('"', '\\"')

def _get_inv_id(invocation):
    return invocation.invocation_id[:10]

def _get_inv_node_id(invocation):
    return 'I' + _get_inv_id(invocation)

def _add_map(dot, invocation, parent_invocation=None):
    node_id = _get_inv_node_id(invocation)
    step = mr.models.kv.step.get(workflow, invocation.step_name)

#    print("MAP [%s] [%s]" % (str(invocation), str(parent_invocation)))
#    print("(Adding node [%s])" % (node_id,))

    label = 'S "' + _escape(step.step_name) + '"' + ' ' +\
            'H "' + _escape(step.map_handler_name) + '"' + ' ' +\
            'MI ' + _get_inv_id(invocation)

    dot.node(node_id, label)

    if parent_invocation is not None:
        parent_node_id = _get_inv_node_id(parent_invocation)
        
        if parent_invocation.direction == mr.constants.D_REDUCE:
            label = 'stored to'
        elif parent_invocation.direction == mr.constants.D_MAP:
            label = 'mapped to'
        else:
            raise ValueError("Invalid 'direction' value [%s] for invocation: "
                             "[%s]" % 
                             (parent_invocation.direction, parent_invocation))

        dot.edge(parent_node_id, node_id, label=label)

def _add_reduce(dot, reduce_invocation, map_invocation, is_loop_to_self):
    map_node_id = _get_inv_node_id(map_invocation)
    reduce_node_id = _get_inv_node_id(reduce_invocation)
    step = mr.models.kv.step.get(workflow, reduce_invocation.step_name)

#    print("REDUCE [%s] [%s]" % (str(reduce_invocation), str(map_invocation)))
#    print("(Adding node [%s])" % (node_id,))

    label = 'S "' + _escape(step.step_name) + '"' + ' ' +\
            'H "' + _escape(step.reduce_handler_name) + '"' + ' ' +\
            'RI ' + _get_inv_id(reduce_invocation)

    dot.node(reduce_node_id, label)

    # If a mapper returns a dataset, it'll be reduced and stored back on 
    # itself.
    if is_loop_to_self is True:
        label = "data reduced by"
    
    # Else, the mapper mapped to downstream steps.
    else:
        label = "step reduced by"

    dot.edge(map_node_id, reduce_node_id, label=label)

def _add_invocations(dot, workflow, request):
    for child_info, is_loop_to_self \
        in mr.trace.invocation_graph_with_data_gen(workflow, request):
            (child_invocation, argument_data, post_combine_data, post_reduce_data, 
             parent_invocation) = child_info

            if child_invocation.direction == mr.constants.D_MAP:
                _add_map(
                    dot, 
                    child_invocation, 
                    parent_invocation=parent_invocation)
            elif child_invocation.direction == mr.constants.D_REDUCE:
                _add_reduce(
                    dot, 
                    child_invocation, 
                    parent_invocation, 
                    is_loop_to_self)
            else:
                raise ValueError("Invocation [%s] direction [%s] invalid." % 
                                 (child_invocation.invocation_id, 
                                  child_invocation.direction))

            # TODO(dustin): See if we can make this a digraph with map-edges and reduce-edges leading back to the same nodes.
            # TODO(dustin): See if we can represent data.
            # TODO(dustin): See if we can also annotate where the data is stored for each operation (dotted-line edges?)
            # TODO(dustin): We have to represent errors.
            # TODO(dustin): We have to show step names.

#            if child_invocation.error is not None:
#                print("  Child invocation error:")
#                print('')
#                print('  %s' % (child_invocation.error,))
#                print('')

def _draw_graph(workflow, request, job):
    replacements = {
        'request_id': request.request_id,
    }

    comment = _GRAPH_COMMENT_TEMPLATE % replacements
    dot = graphviz.Digraph(comment=comment)

    dot.node('Q', 'Request (' + request.request_id[:10] + ')')
    dot.node('W', 'Workflow (' + workflow.workflow_name + ')')
    dot.node('J', 'Job (' + job.job_name + ')')

    dot.edge('Q', 'W', label="resolve workflow")
    dot.edge('W', 'J', label="resolve job from request in workflow")

    _add_invocations(dot, workflow, request)

    root_map_inv_id = _get_inv_node_id(root_invocation)

    dot.edge('J', root_map_inv_id)

    return dot

def _write_dot(dot):
    replacements = {
        'request_id': request.request_id,
    }

    filepath = _OUTPUT_FILEPATH_TEMPLATE % replacements
    with open(filepath, 'w') as f:
        f.write(dot.source)

def main():
    dot = _draw_graph(workflow, request, job)
    _write_dot(dot)

if __name__ == '__main__':
    main()
