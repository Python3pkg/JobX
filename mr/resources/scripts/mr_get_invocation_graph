#!/usr/bin/env python2.7

import sys
import os.path
dev_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
sys.path.insert(0, dev_path)

import argparse
import pprint

import mr.config.log
import mr.trace
import mr.constants
import mr.models.kv.job

description = "Print the invocation-graph for a request"

parser = argparse.ArgumentParser(description=description)

parser.add_argument('workflow_name', help='Workflow name')
parser.add_argument('request_id', help='Request ID')

args = parser.parse_args()

workflow = mr.models.kv.workflow.get(args.workflow_name)
request = mr.models.kv.request.get(workflow, args.request_id)
job = mr.models.kv.job.get(workflow, request.job_name)

print("Request:")
print('')
print('  %s' % (request,))

print('')
print("Job:")
print('')
print('  %s' % (job,))
print('')

print('Graph:')
print('')

for (child_invocation, argument_data, post_combine_data, post_reduce_data, 
     parent_invocation) \
    in mr.trace.invocation_graph_gen(workflow, request):
        if child_invocation.direction == mr.constants.D_MAP:
            action_phrase = 'has been MAPPED to'
        elif child_invocation.direction == mr.constants.D_REDUCE:
            action_phrase = 'was last step finished and induced REDUCTION with'
        else:
            raise ValueError("Invocation [%s] direction [%s] invalid." % 
                             (child_invocation.invocation_id, 
                              child_invocation.direction))

        print("PARENT [%s] [%s]  (%s)  CHILD [%s] [%s]" % 
              (parent_invocation.invocation_id, parent_invocation.step_name,
               action_phrase, child_invocation.invocation_id, 
               child_invocation.step_name))

        print('')

        print("Arguments:\n\n%s" % (pprint.pformat(argument_data),))

        print('')

        print("Post-Combine:\n\n%s" % (pprint.pformat(post_combine_data),))

        print('')

        print("Post-Reduce:\n\n%s" % (pprint.pformat(post_reduce_data),))

        print('')

        if child_invocation.error is not None:
            print('')
            print("  Child invocation error:")
            print('')
            print('  %s' % (child_invocation.error,))
            print('')

        print("=" * 20)

print('')

#print("Result:")
#print('')
#print('  %s' % (request.result,))
#print('')
